#include <TFile.h>
#include <TH1F.h>
#include <TCanvas.h>
#include <TPad.h>
#include <TAxis.h>
#include <TF1.h>

void plot_data() {
  // Open the ROOT file
  TFile f("data.root");

  // Get the TTree
  TTree* tree = (TTree*)f.Get("data");

  // Define variables to hold data
  Double_t num;

  // Set branches for the tree
  tree->SetBranchAddress("number", &num);

  // Create a histogram to store the data
  TH1F* hist = new TH1F("h", "Random numbers distribution", 100, -5, 5);  // Histogram with 100 bins from -5 to 5

  // Fill the histogram from the tree
  tree->Draw(">>h", "number");

  // Create a canvas and pad for plotting
  TCanvas* canvas = new TCanvas("c1", "Random numbers plot", 800, 600);
  canvas->SetFillColor(10);  // Set white background

  // Create a pad for the histogram
  TPad* pad = new TPad("pad1", "", 0.1, 0.1, 0.85, 0.85);
  pad->Draw();
  pad->SetFillColor(0);  // Set transparent pad

  // Set histogram style
  hist->SetLineColor(kBlack);  // Thick black line
  hist->SetLineWidth(2);
  hist->SetFillColor(kYellow);  // Yellow fill color
  hist->SetFillStyle(1001);  // Solid fill

  // Draw the histogram
  hist->Draw("hist");

  // Set axis labels and title
  hist->GetXaxis()->SetTitle("Random number");
  hist->GetYaxis()->SetTitle("Counts");
  canvas->SetTitle("Distribution of 1000 Gaussian random numbers (mean=0, std. dev.=1)");

  // Fit the histogram with a Gaussian function
  TF1* fit = new TF1("fit", "gaus", -5, 5);
  hist->Fit(fit, "NR");

  // Draw the fit function
  fit->Draw("same");

  // Print some fit statistics
  std::cout << "Fit mean: " << fit->GetParameter(1) << std::endl;
  std::cout << "Fit sigma: " << fit->GetParameter(2) << std::endl;

  // Wait for user input to close the plot
  canvas->WaitPrimitive();

  // Clean up objects
  delete hist;
  delete fit;
  delete pad;
  delete canvas;

  f.Close();
}
